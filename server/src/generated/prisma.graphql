type AggregateAudioPrefObject {
  count: Int!
}

type AggregateBan {
  count: Int!
}

type AggregateFeedback {
  count: Int!
}

type AggregateGenderObject {
  count: Int!
}

type AggregateReport {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AudioPrefObject {
  id: ID!
  name: AudioPrefType!
}

type AudioPrefObjectConnection {
  pageInfo: PageInfo!
  edges: [AudioPrefObjectEdge]!
  aggregate: AggregateAudioPrefObject!
}

input AudioPrefObjectCreateInput {
  id: ID
  name: AudioPrefType!
}

input AudioPrefObjectCreateManyInput {
  create: [AudioPrefObjectCreateInput!]
  connect: [AudioPrefObjectWhereUniqueInput!]
}

type AudioPrefObjectEdge {
  node: AudioPrefObject!
  cursor: String!
}

enum AudioPrefObjectOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type AudioPrefObjectPreviousValues {
  id: ID!
  name: AudioPrefType!
}

input AudioPrefObjectScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: AudioPrefType
  name_not: AudioPrefType
  name_in: [AudioPrefType!]
  name_not_in: [AudioPrefType!]
  AND: [AudioPrefObjectScalarWhereInput!]
  OR: [AudioPrefObjectScalarWhereInput!]
  NOT: [AudioPrefObjectScalarWhereInput!]
}

type AudioPrefObjectSubscriptionPayload {
  mutation: MutationType!
  node: AudioPrefObject
  updatedFields: [String!]
  previousValues: AudioPrefObjectPreviousValues
}

input AudioPrefObjectSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AudioPrefObjectWhereInput
  AND: [AudioPrefObjectSubscriptionWhereInput!]
  OR: [AudioPrefObjectSubscriptionWhereInput!]
  NOT: [AudioPrefObjectSubscriptionWhereInput!]
}

input AudioPrefObjectUpdateDataInput {
  name: AudioPrefType
}

input AudioPrefObjectUpdateInput {
  name: AudioPrefType
}

input AudioPrefObjectUpdateManyDataInput {
  name: AudioPrefType
}

input AudioPrefObjectUpdateManyInput {
  create: [AudioPrefObjectCreateInput!]
  update: [AudioPrefObjectUpdateWithWhereUniqueNestedInput!]
  upsert: [AudioPrefObjectUpsertWithWhereUniqueNestedInput!]
  delete: [AudioPrefObjectWhereUniqueInput!]
  connect: [AudioPrefObjectWhereUniqueInput!]
  set: [AudioPrefObjectWhereUniqueInput!]
  disconnect: [AudioPrefObjectWhereUniqueInput!]
  deleteMany: [AudioPrefObjectScalarWhereInput!]
  updateMany: [AudioPrefObjectUpdateManyWithWhereNestedInput!]
}

input AudioPrefObjectUpdateManyMutationInput {
  name: AudioPrefType
}

input AudioPrefObjectUpdateManyWithWhereNestedInput {
  where: AudioPrefObjectScalarWhereInput!
  data: AudioPrefObjectUpdateManyDataInput!
}

input AudioPrefObjectUpdateWithWhereUniqueNestedInput {
  where: AudioPrefObjectWhereUniqueInput!
  data: AudioPrefObjectUpdateDataInput!
}

input AudioPrefObjectUpsertWithWhereUniqueNestedInput {
  where: AudioPrefObjectWhereUniqueInput!
  update: AudioPrefObjectUpdateDataInput!
  create: AudioPrefObjectCreateInput!
}

input AudioPrefObjectWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: AudioPrefType
  name_not: AudioPrefType
  name_in: [AudioPrefType!]
  name_not_in: [AudioPrefType!]
  AND: [AudioPrefObjectWhereInput!]
  OR: [AudioPrefObjectWhereInput!]
  NOT: [AudioPrefObjectWhereInput!]
}

input AudioPrefObjectWhereUniqueInput {
  id: ID
  name: AudioPrefType
}

enum AudioPrefType {
  NO_AUDIO
  MOANS
  CONVERSATION
  CHAT_FIRST
}

type Ban {
  id: ID!
  user: User!
  reason: ReportType!
  startAt: DateTime!
  endAt: DateTime!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type BanConnection {
  pageInfo: PageInfo!
  edges: [BanEdge]!
  aggregate: AggregateBan!
}

input BanCreateInput {
  id: ID
  user: UserCreateOneInput!
  reason: ReportType!
  startAt: DateTime!
  endAt: DateTime!
}

type BanEdge {
  node: Ban!
  cursor: String!
}

enum BanOrderByInput {
  id_ASC
  id_DESC
  reason_ASC
  reason_DESC
  startAt_ASC
  startAt_DESC
  endAt_ASC
  endAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type BanPreviousValues {
  id: ID!
  reason: ReportType!
  startAt: DateTime!
  endAt: DateTime!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type BanSubscriptionPayload {
  mutation: MutationType!
  node: Ban
  updatedFields: [String!]
  previousValues: BanPreviousValues
}

input BanSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BanWhereInput
  AND: [BanSubscriptionWhereInput!]
  OR: [BanSubscriptionWhereInput!]
  NOT: [BanSubscriptionWhereInput!]
}

input BanUpdateInput {
  user: UserUpdateOneRequiredInput
  reason: ReportType
  startAt: DateTime
  endAt: DateTime
}

input BanUpdateManyMutationInput {
  reason: ReportType
  startAt: DateTime
  endAt: DateTime
}

input BanWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  reason: ReportType
  reason_not: ReportType
  reason_in: [ReportType!]
  reason_not_in: [ReportType!]
  startAt: DateTime
  startAt_not: DateTime
  startAt_in: [DateTime!]
  startAt_not_in: [DateTime!]
  startAt_lt: DateTime
  startAt_lte: DateTime
  startAt_gt: DateTime
  startAt_gte: DateTime
  endAt: DateTime
  endAt_not: DateTime
  endAt_in: [DateTime!]
  endAt_not_in: [DateTime!]
  endAt_lt: DateTime
  endAt_lte: DateTime
  endAt_gt: DateTime
  endAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [BanWhereInput!]
  OR: [BanWhereInput!]
  NOT: [BanWhereInput!]
}

input BanWhereUniqueInput {
  id: ID
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Feedback {
  id: ID!
  text: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type FeedbackConnection {
  pageInfo: PageInfo!
  edges: [FeedbackEdge]!
  aggregate: AggregateFeedback!
}

input FeedbackCreateInput {
  id: ID
  text: String!
}

type FeedbackEdge {
  node: Feedback!
  cursor: String!
}

enum FeedbackOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type FeedbackPreviousValues {
  id: ID!
  text: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type FeedbackSubscriptionPayload {
  mutation: MutationType!
  node: Feedback
  updatedFields: [String!]
  previousValues: FeedbackPreviousValues
}

input FeedbackSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FeedbackWhereInput
  AND: [FeedbackSubscriptionWhereInput!]
  OR: [FeedbackSubscriptionWhereInput!]
  NOT: [FeedbackSubscriptionWhereInput!]
}

input FeedbackUpdateInput {
  text: String
}

input FeedbackUpdateManyMutationInput {
  text: String
}

input FeedbackWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [FeedbackWhereInput!]
  OR: [FeedbackWhereInput!]
  NOT: [FeedbackWhereInput!]
}

input FeedbackWhereUniqueInput {
  id: ID
}

type GenderObject {
  id: ID!
  name: GenderType!
}

type GenderObjectConnection {
  pageInfo: PageInfo!
  edges: [GenderObjectEdge]!
  aggregate: AggregateGenderObject!
}

input GenderObjectCreateInput {
  id: ID
  name: GenderType!
}

input GenderObjectCreateManyInput {
  create: [GenderObjectCreateInput!]
  connect: [GenderObjectWhereUniqueInput!]
}

type GenderObjectEdge {
  node: GenderObject!
  cursor: String!
}

enum GenderObjectOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type GenderObjectPreviousValues {
  id: ID!
  name: GenderType!
}

input GenderObjectScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: GenderType
  name_not: GenderType
  name_in: [GenderType!]
  name_not_in: [GenderType!]
  AND: [GenderObjectScalarWhereInput!]
  OR: [GenderObjectScalarWhereInput!]
  NOT: [GenderObjectScalarWhereInput!]
}

type GenderObjectSubscriptionPayload {
  mutation: MutationType!
  node: GenderObject
  updatedFields: [String!]
  previousValues: GenderObjectPreviousValues
}

input GenderObjectSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GenderObjectWhereInput
  AND: [GenderObjectSubscriptionWhereInput!]
  OR: [GenderObjectSubscriptionWhereInput!]
  NOT: [GenderObjectSubscriptionWhereInput!]
}

input GenderObjectUpdateDataInput {
  name: GenderType
}

input GenderObjectUpdateInput {
  name: GenderType
}

input GenderObjectUpdateManyDataInput {
  name: GenderType
}

input GenderObjectUpdateManyInput {
  create: [GenderObjectCreateInput!]
  update: [GenderObjectUpdateWithWhereUniqueNestedInput!]
  upsert: [GenderObjectUpsertWithWhereUniqueNestedInput!]
  delete: [GenderObjectWhereUniqueInput!]
  connect: [GenderObjectWhereUniqueInput!]
  set: [GenderObjectWhereUniqueInput!]
  disconnect: [GenderObjectWhereUniqueInput!]
  deleteMany: [GenderObjectScalarWhereInput!]
  updateMany: [GenderObjectUpdateManyWithWhereNestedInput!]
}

input GenderObjectUpdateManyMutationInput {
  name: GenderType
}

input GenderObjectUpdateManyWithWhereNestedInput {
  where: GenderObjectScalarWhereInput!
  data: GenderObjectUpdateManyDataInput!
}

input GenderObjectUpdateWithWhereUniqueNestedInput {
  where: GenderObjectWhereUniqueInput!
  data: GenderObjectUpdateDataInput!
}

input GenderObjectUpsertWithWhereUniqueNestedInput {
  where: GenderObjectWhereUniqueInput!
  update: GenderObjectUpdateDataInput!
  create: GenderObjectCreateInput!
}

input GenderObjectWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: GenderType
  name_not: GenderType
  name_in: [GenderType!]
  name_not_in: [GenderType!]
  AND: [GenderObjectWhereInput!]
  OR: [GenderObjectWhereInput!]
  NOT: [GenderObjectWhereInput!]
}

input GenderObjectWhereUniqueInput {
  id: ID
  name: GenderType
}

enum GenderType {
  MALE
  FEMALE
  M2F
  F2M
}

scalar Long

type Mutation {
  createAudioPrefObject(data: AudioPrefObjectCreateInput!): AudioPrefObject!
  updateAudioPrefObject(data: AudioPrefObjectUpdateInput!, where: AudioPrefObjectWhereUniqueInput!): AudioPrefObject
  updateManyAudioPrefObjects(data: AudioPrefObjectUpdateManyMutationInput!, where: AudioPrefObjectWhereInput): BatchPayload!
  upsertAudioPrefObject(where: AudioPrefObjectWhereUniqueInput!, create: AudioPrefObjectCreateInput!, update: AudioPrefObjectUpdateInput!): AudioPrefObject!
  deleteAudioPrefObject(where: AudioPrefObjectWhereUniqueInput!): AudioPrefObject
  deleteManyAudioPrefObjects(where: AudioPrefObjectWhereInput): BatchPayload!
  createBan(data: BanCreateInput!): Ban!
  updateBan(data: BanUpdateInput!, where: BanWhereUniqueInput!): Ban
  updateManyBans(data: BanUpdateManyMutationInput!, where: BanWhereInput): BatchPayload!
  upsertBan(where: BanWhereUniqueInput!, create: BanCreateInput!, update: BanUpdateInput!): Ban!
  deleteBan(where: BanWhereUniqueInput!): Ban
  deleteManyBans(where: BanWhereInput): BatchPayload!
  createFeedback(data: FeedbackCreateInput!): Feedback!
  updateFeedback(data: FeedbackUpdateInput!, where: FeedbackWhereUniqueInput!): Feedback
  updateManyFeedbacks(data: FeedbackUpdateManyMutationInput!, where: FeedbackWhereInput): BatchPayload!
  upsertFeedback(where: FeedbackWhereUniqueInput!, create: FeedbackCreateInput!, update: FeedbackUpdateInput!): Feedback!
  deleteFeedback(where: FeedbackWhereUniqueInput!): Feedback
  deleteManyFeedbacks(where: FeedbackWhereInput): BatchPayload!
  createGenderObject(data: GenderObjectCreateInput!): GenderObject!
  updateGenderObject(data: GenderObjectUpdateInput!, where: GenderObjectWhereUniqueInput!): GenderObject
  updateManyGenderObjects(data: GenderObjectUpdateManyMutationInput!, where: GenderObjectWhereInput): BatchPayload!
  upsertGenderObject(where: GenderObjectWhereUniqueInput!, create: GenderObjectCreateInput!, update: GenderObjectUpdateInput!): GenderObject!
  deleteGenderObject(where: GenderObjectWhereUniqueInput!): GenderObject
  deleteManyGenderObjects(where: GenderObjectWhereInput): BatchPayload!
  createReport(data: ReportCreateInput!): Report!
  updateReport(data: ReportUpdateInput!, where: ReportWhereUniqueInput!): Report
  updateManyReports(data: ReportUpdateManyMutationInput!, where: ReportWhereInput): BatchPayload!
  upsertReport(where: ReportWhereUniqueInput!, create: ReportCreateInput!, update: ReportUpdateInput!): Report!
  deleteReport(where: ReportWhereUniqueInput!): Report
  deleteManyReports(where: ReportWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  audioPrefObject(where: AudioPrefObjectWhereUniqueInput!): AudioPrefObject
  audioPrefObjects(where: AudioPrefObjectWhereInput, orderBy: AudioPrefObjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AudioPrefObject]!
  audioPrefObjectsConnection(where: AudioPrefObjectWhereInput, orderBy: AudioPrefObjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AudioPrefObjectConnection!
  ban(where: BanWhereUniqueInput!): Ban
  bans(where: BanWhereInput, orderBy: BanOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Ban]!
  bansConnection(where: BanWhereInput, orderBy: BanOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BanConnection!
  feedback(where: FeedbackWhereUniqueInput!): Feedback
  feedbacks(where: FeedbackWhereInput, orderBy: FeedbackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Feedback]!
  feedbacksConnection(where: FeedbackWhereInput, orderBy: FeedbackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FeedbackConnection!
  genderObject(where: GenderObjectWhereUniqueInput!): GenderObject
  genderObjects(where: GenderObjectWhereInput, orderBy: GenderObjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GenderObject]!
  genderObjectsConnection(where: GenderObjectWhereInput, orderBy: GenderObjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GenderObjectConnection!
  report(where: ReportWhereUniqueInput!): Report
  reports(where: ReportWhereInput, orderBy: ReportOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Report]!
  reportsConnection(where: ReportWhereInput, orderBy: ReportOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReportConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Report {
  id: ID!
  type: ReportType!
  reporter: User!
  offender: User!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type ReportConnection {
  pageInfo: PageInfo!
  edges: [ReportEdge]!
  aggregate: AggregateReport!
}

input ReportCreateInput {
  id: ID
  type: ReportType!
  reporter: UserCreateOneWithoutReportsMadeInput!
  offender: UserCreateOneWithoutReportsReceivedInput!
}

input ReportCreateManyWithoutOffenderInput {
  create: [ReportCreateWithoutOffenderInput!]
  connect: [ReportWhereUniqueInput!]
}

input ReportCreateManyWithoutReporterInput {
  create: [ReportCreateWithoutReporterInput!]
  connect: [ReportWhereUniqueInput!]
}

input ReportCreateWithoutOffenderInput {
  id: ID
  type: ReportType!
  reporter: UserCreateOneWithoutReportsMadeInput!
}

input ReportCreateWithoutReporterInput {
  id: ID
  type: ReportType!
  offender: UserCreateOneWithoutReportsReceivedInput!
}

type ReportEdge {
  node: Report!
  cursor: String!
}

enum ReportOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ReportPreviousValues {
  id: ID!
  type: ReportType!
  updatedAt: DateTime!
  createdAt: DateTime!
}

input ReportScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: ReportType
  type_not: ReportType
  type_in: [ReportType!]
  type_not_in: [ReportType!]
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [ReportScalarWhereInput!]
  OR: [ReportScalarWhereInput!]
  NOT: [ReportScalarWhereInput!]
}

type ReportSubscriptionPayload {
  mutation: MutationType!
  node: Report
  updatedFields: [String!]
  previousValues: ReportPreviousValues
}

input ReportSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ReportWhereInput
  AND: [ReportSubscriptionWhereInput!]
  OR: [ReportSubscriptionWhereInput!]
  NOT: [ReportSubscriptionWhereInput!]
}

enum ReportType {
  UNDERAGE
  ABUSIVE
  NO_VIDEO
  FALSE_AGE
  FALSE_SEX
  FALSE_AUDIO
}

input ReportUpdateInput {
  type: ReportType
  reporter: UserUpdateOneRequiredWithoutReportsMadeInput
  offender: UserUpdateOneRequiredWithoutReportsReceivedInput
}

input ReportUpdateManyDataInput {
  type: ReportType
}

input ReportUpdateManyMutationInput {
  type: ReportType
}

input ReportUpdateManyWithoutOffenderInput {
  create: [ReportCreateWithoutOffenderInput!]
  delete: [ReportWhereUniqueInput!]
  connect: [ReportWhereUniqueInput!]
  set: [ReportWhereUniqueInput!]
  disconnect: [ReportWhereUniqueInput!]
  update: [ReportUpdateWithWhereUniqueWithoutOffenderInput!]
  upsert: [ReportUpsertWithWhereUniqueWithoutOffenderInput!]
  deleteMany: [ReportScalarWhereInput!]
  updateMany: [ReportUpdateManyWithWhereNestedInput!]
}

input ReportUpdateManyWithoutReporterInput {
  create: [ReportCreateWithoutReporterInput!]
  delete: [ReportWhereUniqueInput!]
  connect: [ReportWhereUniqueInput!]
  set: [ReportWhereUniqueInput!]
  disconnect: [ReportWhereUniqueInput!]
  update: [ReportUpdateWithWhereUniqueWithoutReporterInput!]
  upsert: [ReportUpsertWithWhereUniqueWithoutReporterInput!]
  deleteMany: [ReportScalarWhereInput!]
  updateMany: [ReportUpdateManyWithWhereNestedInput!]
}

input ReportUpdateManyWithWhereNestedInput {
  where: ReportScalarWhereInput!
  data: ReportUpdateManyDataInput!
}

input ReportUpdateWithoutOffenderDataInput {
  type: ReportType
  reporter: UserUpdateOneRequiredWithoutReportsMadeInput
}

input ReportUpdateWithoutReporterDataInput {
  type: ReportType
  offender: UserUpdateOneRequiredWithoutReportsReceivedInput
}

input ReportUpdateWithWhereUniqueWithoutOffenderInput {
  where: ReportWhereUniqueInput!
  data: ReportUpdateWithoutOffenderDataInput!
}

input ReportUpdateWithWhereUniqueWithoutReporterInput {
  where: ReportWhereUniqueInput!
  data: ReportUpdateWithoutReporterDataInput!
}

input ReportUpsertWithWhereUniqueWithoutOffenderInput {
  where: ReportWhereUniqueInput!
  update: ReportUpdateWithoutOffenderDataInput!
  create: ReportCreateWithoutOffenderInput!
}

input ReportUpsertWithWhereUniqueWithoutReporterInput {
  where: ReportWhereUniqueInput!
  update: ReportUpdateWithoutReporterDataInput!
  create: ReportCreateWithoutReporterInput!
}

input ReportWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: ReportType
  type_not: ReportType
  type_in: [ReportType!]
  type_not_in: [ReportType!]
  reporter: UserWhereInput
  offender: UserWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [ReportWhereInput!]
  OR: [ReportWhereInput!]
  NOT: [ReportWhereInput!]
}

input ReportWhereUniqueInput {
  id: ID
}

type Subscription {
  audioPrefObject(where: AudioPrefObjectSubscriptionWhereInput): AudioPrefObjectSubscriptionPayload
  ban(where: BanSubscriptionWhereInput): BanSubscriptionPayload
  feedback(where: FeedbackSubscriptionWhereInput): FeedbackSubscriptionPayload
  genderObject(where: GenderObjectSubscriptionWhereInput): GenderObjectSubscriptionPayload
  report(where: ReportSubscriptionWhereInput): ReportSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  ip: String!
  fingerprint: String!
  gender: GenderType!
  lookingFor(where: GenderObjectWhereInput, orderBy: GenderObjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GenderObject!]
  age: Int!
  minAge: Int!
  maxAge: Int!
  audioPref: AudioPrefType!
  accAudioPrefs(where: AudioPrefObjectWhereInput, orderBy: AudioPrefObjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AudioPrefObject!]
  lastActive: DateTime!
  isHost: Boolean!
  isConnected: Boolean!
  visited(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  reportsMade(where: ReportWhereInput, orderBy: ReportOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Report!]
  reportsReceived(where: ReportWhereInput, orderBy: ReportOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Report!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  ip: String!
  fingerprint: String!
  gender: GenderType!
  lookingFor: GenderObjectCreateManyInput
  age: Int!
  minAge: Int!
  maxAge: Int!
  audioPref: AudioPrefType!
  accAudioPrefs: AudioPrefObjectCreateManyInput
  lastActive: DateTime!
  isHost: Boolean!
  isConnected: Boolean!
  visited: UserCreateManyWithoutVisitedInput
  reportsMade: ReportCreateManyWithoutReporterInput
  reportsReceived: ReportCreateManyWithoutOffenderInput
}

input UserCreateManyWithoutVisitedInput {
  create: [UserCreateWithoutVisitedInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutReportsMadeInput {
  create: UserCreateWithoutReportsMadeInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutReportsReceivedInput {
  create: UserCreateWithoutReportsReceivedInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutReportsMadeInput {
  id: ID
  ip: String!
  fingerprint: String!
  gender: GenderType!
  lookingFor: GenderObjectCreateManyInput
  age: Int!
  minAge: Int!
  maxAge: Int!
  audioPref: AudioPrefType!
  accAudioPrefs: AudioPrefObjectCreateManyInput
  lastActive: DateTime!
  isHost: Boolean!
  isConnected: Boolean!
  visited: UserCreateManyWithoutVisitedInput
  reportsReceived: ReportCreateManyWithoutOffenderInput
}

input UserCreateWithoutReportsReceivedInput {
  id: ID
  ip: String!
  fingerprint: String!
  gender: GenderType!
  lookingFor: GenderObjectCreateManyInput
  age: Int!
  minAge: Int!
  maxAge: Int!
  audioPref: AudioPrefType!
  accAudioPrefs: AudioPrefObjectCreateManyInput
  lastActive: DateTime!
  isHost: Boolean!
  isConnected: Boolean!
  visited: UserCreateManyWithoutVisitedInput
  reportsMade: ReportCreateManyWithoutReporterInput
}

input UserCreateWithoutVisitedInput {
  id: ID
  ip: String!
  fingerprint: String!
  gender: GenderType!
  lookingFor: GenderObjectCreateManyInput
  age: Int!
  minAge: Int!
  maxAge: Int!
  audioPref: AudioPrefType!
  accAudioPrefs: AudioPrefObjectCreateManyInput
  lastActive: DateTime!
  isHost: Boolean!
  isConnected: Boolean!
  reportsMade: ReportCreateManyWithoutReporterInput
  reportsReceived: ReportCreateManyWithoutOffenderInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  ip_ASC
  ip_DESC
  fingerprint_ASC
  fingerprint_DESC
  gender_ASC
  gender_DESC
  age_ASC
  age_DESC
  minAge_ASC
  minAge_DESC
  maxAge_ASC
  maxAge_DESC
  audioPref_ASC
  audioPref_DESC
  lastActive_ASC
  lastActive_DESC
  isHost_ASC
  isHost_DESC
  isConnected_ASC
  isConnected_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  ip: String!
  fingerprint: String!
  gender: GenderType!
  age: Int!
  minAge: Int!
  maxAge: Int!
  audioPref: AudioPrefType!
  lastActive: DateTime!
  isHost: Boolean!
  isConnected: Boolean!
  updatedAt: DateTime!
  createdAt: DateTime!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  ip: String
  ip_not: String
  ip_in: [String!]
  ip_not_in: [String!]
  ip_lt: String
  ip_lte: String
  ip_gt: String
  ip_gte: String
  ip_contains: String
  ip_not_contains: String
  ip_starts_with: String
  ip_not_starts_with: String
  ip_ends_with: String
  ip_not_ends_with: String
  fingerprint: String
  fingerprint_not: String
  fingerprint_in: [String!]
  fingerprint_not_in: [String!]
  fingerprint_lt: String
  fingerprint_lte: String
  fingerprint_gt: String
  fingerprint_gte: String
  fingerprint_contains: String
  fingerprint_not_contains: String
  fingerprint_starts_with: String
  fingerprint_not_starts_with: String
  fingerprint_ends_with: String
  fingerprint_not_ends_with: String
  gender: GenderType
  gender_not: GenderType
  gender_in: [GenderType!]
  gender_not_in: [GenderType!]
  age: Int
  age_not: Int
  age_in: [Int!]
  age_not_in: [Int!]
  age_lt: Int
  age_lte: Int
  age_gt: Int
  age_gte: Int
  minAge: Int
  minAge_not: Int
  minAge_in: [Int!]
  minAge_not_in: [Int!]
  minAge_lt: Int
  minAge_lte: Int
  minAge_gt: Int
  minAge_gte: Int
  maxAge: Int
  maxAge_not: Int
  maxAge_in: [Int!]
  maxAge_not_in: [Int!]
  maxAge_lt: Int
  maxAge_lte: Int
  maxAge_gt: Int
  maxAge_gte: Int
  audioPref: AudioPrefType
  audioPref_not: AudioPrefType
  audioPref_in: [AudioPrefType!]
  audioPref_not_in: [AudioPrefType!]
  lastActive: DateTime
  lastActive_not: DateTime
  lastActive_in: [DateTime!]
  lastActive_not_in: [DateTime!]
  lastActive_lt: DateTime
  lastActive_lte: DateTime
  lastActive_gt: DateTime
  lastActive_gte: DateTime
  isHost: Boolean
  isHost_not: Boolean
  isConnected: Boolean
  isConnected_not: Boolean
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  ip: String
  fingerprint: String
  gender: GenderType
  lookingFor: GenderObjectUpdateManyInput
  age: Int
  minAge: Int
  maxAge: Int
  audioPref: AudioPrefType
  accAudioPrefs: AudioPrefObjectUpdateManyInput
  lastActive: DateTime
  isHost: Boolean
  isConnected: Boolean
  visited: UserUpdateManyWithoutVisitedInput
  reportsMade: ReportUpdateManyWithoutReporterInput
  reportsReceived: ReportUpdateManyWithoutOffenderInput
}

input UserUpdateInput {
  ip: String
  fingerprint: String
  gender: GenderType
  lookingFor: GenderObjectUpdateManyInput
  age: Int
  minAge: Int
  maxAge: Int
  audioPref: AudioPrefType
  accAudioPrefs: AudioPrefObjectUpdateManyInput
  lastActive: DateTime
  isHost: Boolean
  isConnected: Boolean
  visited: UserUpdateManyWithoutVisitedInput
  reportsMade: ReportUpdateManyWithoutReporterInput
  reportsReceived: ReportUpdateManyWithoutOffenderInput
}

input UserUpdateManyDataInput {
  ip: String
  fingerprint: String
  gender: GenderType
  age: Int
  minAge: Int
  maxAge: Int
  audioPref: AudioPrefType
  lastActive: DateTime
  isHost: Boolean
  isConnected: Boolean
}

input UserUpdateManyMutationInput {
  ip: String
  fingerprint: String
  gender: GenderType
  age: Int
  minAge: Int
  maxAge: Int
  audioPref: AudioPrefType
  lastActive: DateTime
  isHost: Boolean
  isConnected: Boolean
}

input UserUpdateManyWithoutVisitedInput {
  create: [UserCreateWithoutVisitedInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutVisitedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutVisitedInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutReportsMadeInput {
  create: UserCreateWithoutReportsMadeInput
  update: UserUpdateWithoutReportsMadeDataInput
  upsert: UserUpsertWithoutReportsMadeInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutReportsReceivedInput {
  create: UserCreateWithoutReportsReceivedInput
  update: UserUpdateWithoutReportsReceivedDataInput
  upsert: UserUpsertWithoutReportsReceivedInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutReportsMadeDataInput {
  ip: String
  fingerprint: String
  gender: GenderType
  lookingFor: GenderObjectUpdateManyInput
  age: Int
  minAge: Int
  maxAge: Int
  audioPref: AudioPrefType
  accAudioPrefs: AudioPrefObjectUpdateManyInput
  lastActive: DateTime
  isHost: Boolean
  isConnected: Boolean
  visited: UserUpdateManyWithoutVisitedInput
  reportsReceived: ReportUpdateManyWithoutOffenderInput
}

input UserUpdateWithoutReportsReceivedDataInput {
  ip: String
  fingerprint: String
  gender: GenderType
  lookingFor: GenderObjectUpdateManyInput
  age: Int
  minAge: Int
  maxAge: Int
  audioPref: AudioPrefType
  accAudioPrefs: AudioPrefObjectUpdateManyInput
  lastActive: DateTime
  isHost: Boolean
  isConnected: Boolean
  visited: UserUpdateManyWithoutVisitedInput
  reportsMade: ReportUpdateManyWithoutReporterInput
}

input UserUpdateWithoutVisitedDataInput {
  ip: String
  fingerprint: String
  gender: GenderType
  lookingFor: GenderObjectUpdateManyInput
  age: Int
  minAge: Int
  maxAge: Int
  audioPref: AudioPrefType
  accAudioPrefs: AudioPrefObjectUpdateManyInput
  lastActive: DateTime
  isHost: Boolean
  isConnected: Boolean
  reportsMade: ReportUpdateManyWithoutReporterInput
  reportsReceived: ReportUpdateManyWithoutOffenderInput
}

input UserUpdateWithWhereUniqueWithoutVisitedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutVisitedDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutReportsMadeInput {
  update: UserUpdateWithoutReportsMadeDataInput!
  create: UserCreateWithoutReportsMadeInput!
}

input UserUpsertWithoutReportsReceivedInput {
  update: UserUpdateWithoutReportsReceivedDataInput!
  create: UserCreateWithoutReportsReceivedInput!
}

input UserUpsertWithWhereUniqueWithoutVisitedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutVisitedDataInput!
  create: UserCreateWithoutVisitedInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  ip: String
  ip_not: String
  ip_in: [String!]
  ip_not_in: [String!]
  ip_lt: String
  ip_lte: String
  ip_gt: String
  ip_gte: String
  ip_contains: String
  ip_not_contains: String
  ip_starts_with: String
  ip_not_starts_with: String
  ip_ends_with: String
  ip_not_ends_with: String
  fingerprint: String
  fingerprint_not: String
  fingerprint_in: [String!]
  fingerprint_not_in: [String!]
  fingerprint_lt: String
  fingerprint_lte: String
  fingerprint_gt: String
  fingerprint_gte: String
  fingerprint_contains: String
  fingerprint_not_contains: String
  fingerprint_starts_with: String
  fingerprint_not_starts_with: String
  fingerprint_ends_with: String
  fingerprint_not_ends_with: String
  gender: GenderType
  gender_not: GenderType
  gender_in: [GenderType!]
  gender_not_in: [GenderType!]
  lookingFor_every: GenderObjectWhereInput
  lookingFor_some: GenderObjectWhereInput
  lookingFor_none: GenderObjectWhereInput
  age: Int
  age_not: Int
  age_in: [Int!]
  age_not_in: [Int!]
  age_lt: Int
  age_lte: Int
  age_gt: Int
  age_gte: Int
  minAge: Int
  minAge_not: Int
  minAge_in: [Int!]
  minAge_not_in: [Int!]
  minAge_lt: Int
  minAge_lte: Int
  minAge_gt: Int
  minAge_gte: Int
  maxAge: Int
  maxAge_not: Int
  maxAge_in: [Int!]
  maxAge_not_in: [Int!]
  maxAge_lt: Int
  maxAge_lte: Int
  maxAge_gt: Int
  maxAge_gte: Int
  audioPref: AudioPrefType
  audioPref_not: AudioPrefType
  audioPref_in: [AudioPrefType!]
  audioPref_not_in: [AudioPrefType!]
  accAudioPrefs_every: AudioPrefObjectWhereInput
  accAudioPrefs_some: AudioPrefObjectWhereInput
  accAudioPrefs_none: AudioPrefObjectWhereInput
  lastActive: DateTime
  lastActive_not: DateTime
  lastActive_in: [DateTime!]
  lastActive_not_in: [DateTime!]
  lastActive_lt: DateTime
  lastActive_lte: DateTime
  lastActive_gt: DateTime
  lastActive_gte: DateTime
  isHost: Boolean
  isHost_not: Boolean
  isConnected: Boolean
  isConnected_not: Boolean
  visited_every: UserWhereInput
  visited_some: UserWhereInput
  visited_none: UserWhereInput
  reportsMade_every: ReportWhereInput
  reportsMade_some: ReportWhereInput
  reportsMade_none: ReportWhereInput
  reportsReceived_every: ReportWhereInput
  reportsReceived_some: ReportWhereInput
  reportsReceived_none: ReportWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
}
