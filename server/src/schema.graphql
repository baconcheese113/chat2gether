# import * from './generated/prisma.graphql'

# typedefs
type Query {
  users(
    where: UserWhereInput
    orderBy: UserOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [User!]!
  user(where: UserWhereUniqueInput!): User
  me: User!
  findRoom: User
  matches(
    where: MatchWhereInput
    orderBy: MatchOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Match!]!
}

type Mutation {
  createUser(data: CreateUserInput!): User!
  updateUser(data: UserUpdateInput!): User!
  createFeedback(data: FeedbackCreateInput!): Feedback!
  createReport(data: CreateReportInput!): Report!
  createMatch(data: CreateMatchInput!): Match!
  disconnectMatch(data: DisconnectMatchInput!): Match!
}

# type Subscription {

# }

type GenderObject {
  id: ID!
  name: GenderType!
}
type AudioPrefObject {
  id: ID!
  name: AudioPrefType!
}
input DisconnectMatchInput {
  id: ID!
  type: DisconnectType!
}
input CreateMatchInput {
  otherUserId: ID!
}
input CreateReportInput {
  type: ReportType!
  offenderId: ID!
}

input CreateUserInput {
  gender: GenderType!
  lookingFor: GenderObjectCreateManyInput
  age: Int!
  minAge: Int!
  maxAge: Int!
  audioPref: AudioPrefType!
  accAudioPrefs: AudioPrefObjectCreateManyInput
}
type User {
  id: ID!
  gender: GenderType!
  lookingFor: [GenderObject!]!
  age: Int!
  minAge: Int!
  maxAge: Int!
  audioPref: AudioPrefType!
  accAudioPrefs: [AudioPrefObject!]!
  lastActive: String!
  isHost: Boolean!
  isConnected: Boolean!
  matches(orderBy: MatchOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Match!]!
  reportsMade: [Report!]
  reportsReceived: [Report!]
  updatedAt: String!
  createdAt: String!
}
enum MutationType {
  CREATED
  UPDATED
  DELETED
}
enum GenderType {
  MALE
  FEMALE
  M2F
  F2M
}
enum AudioPrefType {
  NO_AUDIO
  MOANS
  CONVERSATION
  CHAT_FIRST
}

type Feedback {
  id: ID!
  text: String!
  updatedAt: String!
  createdAt: String!
}
